#!/bin/bash
# Note: This script must be sourced before it can be used directly:
#
#     source vee
#
# After that, an alias will be formed with the same name, "vee", which then
# takes over as the actual command.
VEE_VENV_DIR="${HOME}/.venv"

# Make sure that all the variables we need are configured.
# FIXME: This should be cleaned up on exit.
configure_vars() {
    VEE_PROJECT=$(basename "$(pwd)")
    VEE_ACTIVATION_FILE="${VEE_VENV_DIR}/${VEE_PROJECT}/bin/activate"
}

# Override the `cd` command to allow for some automation.
cd() {
    # Run the built-in `cd` function as expected.
    builtin cd "$@"

    # Automatically activate virtual environment if appropriate.
    configure_vars
    if [ -f "requirements.txt" ] && [ -f "${VEE_ACTIVATION_FILE}" ]; then
        vee
    fi
}

# The `vee` command in the session will henceforth refer to this function, and
# not to the identically names script.
vee() {

    configure_vars

    # Command for starting a new virtual environment and installing the
    # packages found in `requirements.txt`, if it is present.
    if [ "$1" = "start" ]; then

        # Check if virtual environment exists.
        if [ -f "${VEE_ACTIVATION_FILE}" ]; then
            echo "Error: Virtual environment already exists."
            return
        fi

        # Move to virtual environment directory.
        OLD_DIR="$(pwd)"
        builtin cd "${VEE_VENV_DIR}"

        # Create Python virtual environment.
        python3 -m venv "${VEE_PROJECT}"

        # Move back to old directory.
        builtin cd "${OLD_DIR}"

        # Activate the newly created virtual environment.
        source "${VEE_ACTIVATION_FILE}"

        # Install packages in requirements.txt.
        if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
        fi

    # Default behavior. Can be run by running `vee` without arguments when the
    # script has been sourced (with `source vee`), but is automatically
    # executed when entering a directory where it works, so there is normally
    # no good reason to run this manually.
    elif [ "$1" = "" ] || [ "$1" = "quiet" ]; then

        if [ -f "${VEE_ACTIVATION_FILE}" ]; then
            source "${VEE_ACTIVATION_FILE}"
        elif [ "$1" != "quiet" ]; then
            echo "Error: Python virtual environment for project '${VEE_PROJECT}' was not found in '${VEE_VENV_DIR}'."
        fi

    else
        echo "Invalid command."
    fi
}

# Only runs when script is sourced initially. This is done in case the shell
# sourcing the script is opened within a directory where `vee` should run.
if [ "$0" != "$BASH_SOURCE" ]; then
    vee quiet
fi
