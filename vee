#!/bin/bash
# Note: This script must be sourced before it can be used directly:
#
#     source vee
#
# After that, an alias will be formed with the same name, "vee", which then
# takes over as the actual command.
VENV_DIR="${HOME}/.venv"

configure_vars() {
    PROJECT=$(basename "$(pwd)")
    VENV_PROJECT="${VENV_DIR}/${PROJECT}"
    ACTIVATION_FILE="${VENV_PROJECT}/bin/activate"
}

cd() {
    # Run the built-in `cd` function as expected.
    builtin cd "$@"

    # Automatically activate virtual environment if appropriate.
    configure_vars
    if [ -f "requirements.txt" ] && [ -f "${ACTIVATION_FILE}" ]; then
        vee
    fi
}

# This allows the user to call the script directly instead of
# `source`-ing it with double quotes every time.
vee() {
    configure_vars

    if [ "$1" = "start" ]; then

        # Check if virtual environment exists.
        if [ -f "${ACTIVATION_FILE}" ]; then
            echo "Error: Virtual environment already exists."
            return
        fi

        # Move to virtual environment directory.
        OLD_DIR="$(pwd)"
        builtin cd "${VENV_DIR}"

        # Create Python virtual environment.
        python3 -m venv "${PROJECT}"

        # Move back to old directory.
        builtin cd "${OLD_DIR}"

        # Activate the newly created virtual environment.
        source "${ACTIVATION_FILE}"

        # Install packages in requirements.txt.
        if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
        fi

    elif [ "$1" = "" ]; then

        if [ -f "${ACTIVATION_FILE}" ]; then
            source "${ACTIVATION_FILE}"
        else
            echo "Error: Python virtual environment for project '${PROJECT}' was not found in '${VENV_DIR}'."
        fi

    else
        echo "Invalid command."
    fi
}
